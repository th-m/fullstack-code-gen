// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const searchUsers = `-- name: SearchUsers :many
SELECT id, name FROM users
WHERE ($1::BOOLEAN OR id = ANY($2::VARCHAR[]))
  AND ($3::BOOLEAN OR name = ANY($4::VARCHAR[]))
`

type SearchUsersParams struct {
	SkipID   bool     `json:"skip_id"`
	ID       []string `json:"id"`
	SkipName bool     `json:"skip_name"`
	Name     []string `json:"name"`
}

func (q *Queries) SearchUsers(ctx context.Context, arg SearchUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, searchUsers,
		arg.SkipID,
		pq.Array(arg.ID),
		arg.SkipName,
		pq.Array(arg.Name),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUser = `-- name: SelectUser :one
SELECT id, name FROM users WHERE id = $1
`

func (q *Queries) SelectUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO users (id, name) 
VALUES ($1, $2)
ON CONFLICT (id) DO UPDATE SET 
    id = EXCLUDED.id, 
    name = EXCLUDED.name 
WHERE users.id = EXCLUDED.id RETURNING id, name
`

type UpsertUserParams struct {
	ID   string         `json:"id"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, upsertUser, arg.ID, arg.Name)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
